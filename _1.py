# -*- coding: utf-8 -*-
"""#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ptPM2PHHNvwwYEYdSPWnGCmwBCiS0Le
"""
#ECE 113 PROJECT PROBLEM 1
#TAIT KAMINSKI, DENNY TSAI, NATHAN CHEN, CHARLES BAI

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/My Drive/ECE113"

!pwd

from scipy.io import wavfile
import numpy as np
import pandas as pd
import os
from glob import glob
PATH = '/content/drive/My Drive/ECE113/training_data_1'
audio_file_paths = [y for x in os.walk(PATH) for y in glob(os.path.join(x[0], '*.wav'))]
print(len(audio_file_paths))
assert(len(audio_file_paths) == 1994)

index = [i for i in range(len(audio_file_paths))]
columns = ['data', 'label']
df_train = pd.DataFrame(index=index, columns=columns)
for i, file_path in enumerate(audio_file_paths):
    fs, data = wavfile.read(file_path)
    # label assigned to each chord is the name of the folder it is placed inside
    label = os.path.dirname(file_path).split("/")[-1]
    df_train.loc[i] = [data, label]

y = df_train.iloc[:, 1].values
X = df_train.iloc[:, :-1].values
X = np.squeeze(X)
#X = np.stack(X, axis=0)

from sklearn import preprocessing

labelencoder_y = preprocessing.LabelEncoder()
y = labelencoder_y.fit_transform(y)

labelencoder_y.classes_

#Things I'm unsure on 1. if these chords actually correspond to the note label I've given them. (I labelled them
#according to the labelencoder_y.classes array above) 
from scipy.fft import fft
import matplotlib.pyplot as plt
#rate = 44100
orderarray = ['bm', 'c', 'em', 'am', 'f', 'd', 'g', 'e', 'dm', 'a']
for x in range(0,10) :
  r2 = fft(X[2+(200*x)])
  #xaxis = np.arange(len(X[1+(200*x)])) * rate / len(r2) 
  plt.figure(1+x)
  plt.plot(abs(r2))
  plt.xlim([0,3000])
  plt.xlabel('Value of k')
  plt.ylabel('Intensity')
  plt.title( orderarray[x] +' Response')
  print(orderarray[x])

#test code to see which frequency each index belongs to as well as 
print(y[340])

PATH= './Problem_1_data/test_data_1'
# max_length of audiofile

index = [i for i in range(10)]
columns = ['data']
df_test_1 = pd.DataFrame(index=index, columns=columns)
for i, file_path in enumerate(glob(os.path.join(PATH, '*.wav'))):
    fs, data = wavfile.read(file_path)
    df_test_1.loc[i] = [data]

X_test = df_test_1.iloc[:, :].values
X_test = np.squeeze(X_test)

def convolution_(signal_1, signal_2):
  signal_1x = signal_1/np.linalg.norm(signal_1)
  signal_2x = signal_2/np.linalg.norm(signal_2)
  convarr = np.correlate(signal_1x, signal_2x)
  num = ((np.linalg.norm(convarr))**2)/len(convarr)
  return num

testvector = []
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/a/a115.wav')
re = data
testvector.append(re)
re = X[632]
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/bm/bm115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/c/c115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/d/d115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/dm/dm115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/e/e115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/em/em110.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/f/f115.wav')
re = data
testvector.append(re)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/g/g115.wav')
re = data
testvector.append(re)

def argmax_(signal_1):
  a= []
  ry = signal_1
  for x in range(0,10):
     ex = convolution_(ry, testvector[x])
     a.append(ex)
     #print(ex)
  s = np.argmax(a)
  return s

#rate, x = wavfile.read('/content/drive/My Drive/ECE113/training_data_1/g/g46.wav')
x = X[621]

s = argmax_(x)
print(s)

Confusion = np.zeros((10,10))
for nu in range(0,200):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)

print(Confusion)

for nu in range(201,400):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup = Confusion

for nu in range(401,600):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup1 = Confusion

for nu in range(601,800):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup2 = Confusion

for nu in range(801,1000):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup3 = Confusion

for nu in range(1001,1600):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup4 = Confusion

for nu in range(1601,1994):
  s = argmax_(X[nu])
  Confusion[y[nu]][s] += 1

print(Confusion)
Confusionbackup5 = Confusion

import seaborn
#seaborn.heatmap(Confusionbackup5)
plt.imshow(Confusionbackup5)
x = [0,1,2,3,4,5,6,7,8,9]
y = [0,1,2,3,4,5,6,7,8,9]
m = ['a', 'am', 'bm', 'c', 'd', 'dm', 'e', 'em', 'f', 'g']
plt.xticks(x, m)
plt.yticks(x, m)

rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/1.wav')
testvector1 = []
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/2.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/3.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/4.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/5.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/6.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/7.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/8.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/9.wav')
s = argmax_(data)
testvector1.append(s)
rate, data = wavfile.read('/content/drive/My Drive/ECE113/test_data_1/10.wav')
s = argmax_(data)
testvector1.append(s)
print(testvector1)